fun putInt(n:int):void;
fun putChar(c:char):void;
fun putString(s:ptr char):void;

fun main():int =
    {
      putString(" facItr: "); putChar((10:char));
      n=1;
      while n<=10 do
        putInt(n); putString(" :  ");
	putInt(facItr(n));
	putChar((10:char));
	n=n+1;
      end;

      putString(" facRec: "); putChar((10:char));
      n=1;
      while n<=10 do
        putInt(n); putString(" :  ");
	putInt(facRec(n));
	putChar((10:char));
	n=n+1;
      end;

      putString(" fibItr: "); putChar((10:char));
      n=1;
      while n<=10 do
        putInt(n); putString(" :  ");
	putInt(fibItr(n));
	putChar((10:char));
	n=n+1;
      end;

      putString(" fibRec: "); putChar((10:char));
      n=1;
      while n<=10 do
        putInt(n); putString(" :  ");
	putInt(fibRec(n));
	putChar((10:char));
	n=n+1;
      end;


      putString(" Combs: "); putChar((10:char));
      combs(4,3);


      : 0
    where
      var n:int; var m:int;
    };

fun facItr(n:int):int =
    { f=1;
      while n>0 do f=f*n; n=n-1; end;
    : f
    where
      var f:int;
    };

fun facRec(n:int):int =
    { if n==1 then f=1; else f=n*facRec(n-1); end;
    : f
    where
      var f:int;
    };

fun fibItr(n:int):int =
    { f=1; fm1=1; fm2=0;
      while n>1 do
        f=fm1+fm2;fm2=fm1;fm1=f;
	n=n-1;
      end;
    : f
    where
      var f:int;
      var fm1:int;
      var fm2:int;
    };

fun fibRec(n:int):int =
    { if n<=2 then f=1; else f=fibRec(n-1)+fibRec(n-2); end;
    : f
    where
      var f:int;
    };

fun combs(n:int,k:int):int =
    { i=0; while i<100 do c[i]=0; i=i+1; end;
      gen(0);
    : 0
    where
      var c:arr[100]int;
      var i:int;
      fun gen(i:int):int =
        { if i==n then
	    j=0;
	    while j<n do
	      putInt(c[j]);
	      putChar(' ');
	      j=j+1;
	    end;
	    putChar((10:char));
	  else
	    j=1;
	    while j<=k do
	      c[i] = j; j=j+1;
	      gen(i+1);
	    end; 
	  end;
	: 0
	where
	  var j:int;
	};
    };

fun sudoku(t2d:ptr arr[9] arr[9] int):int =
    { t1d=(t2d:ptr arr[81] int);
    : solve(0,81)
    where
      var t1d:ptr arr[81] int;
      fun check_h(j:int):bool =
          { check=true;
	    i=1; while i<=9 do mask[i]=false; i=i+1; end;
	    i=0;
	    while i<9 do
	      if (@t2d)[j][i]!=0 then
	        if mask[(@t2d)[j][i]]
		  then check=false;
		  else mask[(@t2d)[j][i]]=true;
		end;
	      end;
	      i=i+1;
	    end;
	  : check
	  where
	    var mask:arr[10] bool;
	    var i:int;
	    var check:bool;
	  };
      fun check_v(i:int):bool =
          { check=true;
	    j=1; while j<=9 do mask[j]=false; j=j+1; end;
	    j=0;
	    while j<9 do
	      if (@t2d)[j][i]!=0 then
	        if mask[(@t2d)[j][i]]
		  then check=false;
		  else mask[(@t2d)[j][i]]=true;
		end;
	      end;
	      j=j+1;
	    end;
	  : check
	  where
	    var mask:arr[10] bool;
	    var j:int;
	    var check:bool;
	  };
      fun check_q(i:int,j:int):bool =
          { check=true;
	    k=1; while k<=9 do mask[k]=false; k=k+1; end;
	    jj=0;
	    while jj<3 do
	      ii=0;
	      while ii<3 do
	        if (@t2d)[j*3+jj][i*3+ii]!=0 then
		  if mask[(@t2d)[j*3+jj][i*3+ii]]
		    then check=false;
		    else mask[(@t2d)[j*3+jj][i*3+ii]]=true;
		  end;
		end;
	        ii=ii+1;
	      end;
	      jj=jj+1;
	    end;
	  : check
	  where
	    var mask:arr[10] bool;
	    var ii:int;
	    var jj:int;
	    var k:int;
	    var check:bool;
	  };
      fun solve(k:int,n:int):int =
          { if k==n then
	      { if true then
	          j=0;
	          while j<9 do
		    i=0;
		    while i<9 do
		      putInt((@t2d)[j][i]);
		      putChar(' ');
		      i=i+1;
		    end;
		    putChar((10:char));
		    j=j+1;
		  end;
		  putChar((10:char));
		end;
	      : none
	      where
	        var j:int;
		var i:int;
	      };
	      count=1;
	    else
	      if (@t1d)[k]!=0 then
	        count=solve(k+1,n);
              else
		{ count = 0;
		  d=1;
		  while d<=9 do
		    (@t1d)[k]=d;
		    if check_h(k/9)&check_v(k%9)&check_q((k/9)/3,(k%9)/3) then
		      count=count+solve(k+1,n);
		    end;
		    (@t1d)[k]=0;
		    d=d+1;
		  end;
		: none
		where
		  var d:int;
		};
	      end;
	    end;
	  : count
	  where
	    var count:int;
	  };
    };
